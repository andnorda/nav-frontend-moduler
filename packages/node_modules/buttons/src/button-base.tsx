import * as PT from 'prop-types';
import * as React from 'react';
import * as classNames from 'classnames';
import { omit } from 'nav-frontend-js-utils';
import 'nav-frontend-knapper-style';

import { CustomHTMLButtonAttributes } from './CustomHTMLButtonAttributes';

const cls = (props) => classNames('knapp', props.className, {
    'knapp--hoved': props.type === 'hoved',
    'knapp--fare': props.type === 'fare',
    'knapp--standard': props.type === 'standard',
    'knapp--flat': props.type === 'flat',
    'knapp--mini': props.mini,
    'knapp--disabled': props.disabled,
    'knapp--spinner': props.spinner,
    'knapp--kompakt': props.kompakt
});

function skalVareDisabled(autoDis, disabled, spinner) {
    if (autoDis) {
        return disabled || spinner;
    }
    return disabled;
}

export interface ButtonBaseProps extends CustomHTMLButtonAttributes {
    /**
     * Verdi for <button>-attributtet 'type', angir knappens default funksjon
     */
    htmlType?: 'submit' | 'button' | 'reset';
    /**
     * Tettere, 32px høy variant
     */
    mini?: boolean;
    /**
     * Knapp med spinner
     */
    spinner?: boolean;
    /**
     * -
     */
    autoDisableVedSpinner?: boolean;
    /**
     * -
     */
    inaktivKlasseVedDisabled?: boolean;
    /**
     * Varianter å velge mellom
     */
    type?: 'standard' | 'hoved' | 'fare' | 'flat';
    /**
     * Innstillinger for å endre på knappens form.
     */
    kompakt?: boolean;
}

const ButtonBase = React.forwardRef<HTMLButtonElement, ButtonBaseProps>((props, ref) => {

    const {
        children,
        autoDisableVedSpinner = false,
        inaktivKlasseVedDisabled = false,
        className = null,
        htmlType = 'submit',
        mini = false,
        disabled = false,
        spinner = false,
        type = 'standard',
        kompakt = false,
        ...others
    } = props;

    const spinnerr = spinner ? <span className="knapp__spinner" /> : null;
    const ariaLabel = spinner ? { 'aria-label': 'Laster' } : {};
    const disabledd = skalVareDisabled(autoDisableVedSpinner, disabled, spinner);
    const typee = props.htmlType;
    const domProps = omit(
        { ...others, disabled , typee },
        'htmlType',
        'mini',
        'spinner',
        'autoDisableVedSpinner',
        'inaktivKlasseVedDisabled',
        'kompakt'
    );
    const test = { type, mini, disabled, spinner, kompakt };

    return (
        <button ref={ref} className={cls(test)} disabled={disabledd} {...domProps} {...ariaLabel}>
            {children}
            {spinnerr}
        </button>
    );
});
/**
 *  Knapp, Hovedknapp og Fareknapp arver alle fra KnappBase, og har da samme props.
 *  Unntaket er `type` som blir satt av de respektive underklassene.
 */

(ButtonBase as any).propTypes = {
    children: PT.node.isRequired,
    className: PT.string,
    type: PT.oneOf(['standard', 'hoved', 'fare', 'flat']),
    htmlType: PT.oneOf(['submit', 'button', 'reset']),
    mini: PT.bool,
    disabled: PT.bool,
    spinner: PT.bool,
    autoDisableVedSpinner: PT.bool,
    inaktivKlasseVedDisabled: PT.bool,
    kompakt: PT.bool
};

export default ButtonBase;
