import * as PT from 'prop-types';
import * as React from 'react';
import * as classNames from 'classnames';
import { Normaltekst } from 'nav-frontend-typografi';
import Ikon from 'nav-frontend-ikoner-assets';

import 'alerts-style';

export type AlertStripeType = 'info' | 'suksess' | 'advarsel' | 'feil';
export type AlertStripeForm = 'inline' | 'default';

const cls = (type, form, className) =>
    classNames('alertstripe', className, {
        'alertstripe--info': type === 'info',
        'alertstripe--suksess': type === 'suksess',
        'alertstripe--advarsel': type === 'advarsel',
        'alertstripe--feil': type === 'feil',
        'alertstripe--inline': form === 'inline'
    });

const ikonKind = (type: AlertStripeType) => {
    switch (type) {
        case 'suksess': return 'ok-sirkel-fyll';
        case 'advarsel': return 'advarsel-sirkel-fyll';
        case 'feil': return 'feil-sirkel-fyll';
        default: return 'info-sirkel-fyll';
    }
};

export interface AlertProps {
    /**
     * -
     */
    children: React.ReactNode | React.ReactChild | React.ReactChildren;
    /**
     * -
     */
    size?: string | number;
    /**
     * -
     */
    className?: string;
}

export interface AlertBaseProps extends AlertProps {
    /**
     * Varianter Ã¥ velge mellom
     */
    type: AlertStripeType;
    /**
     * Form - enten 'default' eller 'inline'
     */
    form?: AlertStripeForm;
}

const Alert = React.forwardRef<HTMLDivElement, AlertBaseProps>((props, ref) => {
    const { type, form = 'default', size = '1.5em', className = undefined, children, ...others } = props;
    return (
        <div ref={ref} className={cls(type, form, className)} {...others} >
            <span className="alertstripe__ikon">
                <span className="sr-only">{type}</span>
                <Ikon kind={ikonKind(type)} size={size} />
            </span>
            <Normaltekst className="alertstripe__tekst" tag="div">
                {children}
            </Normaltekst>
        </div>
    );
});

Alert.propTypes = {
    children: PT.node.isRequired,
    type: PT.oneOf<AlertStripeType>(['info', 'suksess', 'advarsel', 'feil']).isRequired,
    size: PT.oneOfType([PT.string, PT.number]),
    className: PT.string
};

export default Alert;
